using Discord;
using Discord.WebSocket;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Tower.Services.Antivirus.Models;

namespace Tower.Services.Discord;
public class MalwareHandler(ILogger<MalwareHandler> logger, IServiceScopeFactory scopeFactory)
{
    private readonly ILogger<MalwareHandler> _logger = logger;
    private readonly IServiceScopeFactory _scopeFactory = scopeFactory;

    private static Embed CreateWarningEmbed(SocketUser author, ScanResult scanResult)
    {
        var embedBuilder = new EmbedBuilder()
            .WithTitle(scanResult.IsMalware ? "Malware Detected" : "Suspicious Content Detected")
            .WithDescription($"A {(scanResult.IsMalware ? "malicious" : "suspicious")} link was detected.")
            .AddField("User", author.Mention, inline: true)
            .AddField("Link", scanResult.Link, inline: true)
            .AddField("Source", scanResult.ScanSource, inline: false)
            .WithColor(scanResult.IsMalware ? Color.Red : Color.Orange)
            .WithTimestamp(DateTimeOffset.UtcNow);

        return embedBuilder.Build();
    }

    public async Task HandleSuspiciousFoundAsync(SocketUserMessage message, ScanResult scanResult)
    {
        _logger.LogInformation($"Suspicious content found in {scanResult.Link}");

        var embed = CreateWarningEmbed(message.Author, scanResult);
        await SendEmbedToChannelsAsync(message, embed);
    }

    public async Task HandleMalwareFoundAsync(SocketUserMessage message, ScanResult scanResult)
    {
        _logger.LogInformation($"Malware found in {scanResult.Link}");

        var embed = CreateWarningEmbed(message.Author, scanResult);
        await SendEmbedToChannelsAsync(message, embed);

        if (scanResult.ScannedLinkId.HasValue && message.Channel is SocketGuildChannel guildChannel)
        {
            using var scope = _scopeFactory.CreateScope();
            var dbManager = scope.ServiceProvider.GetRequiredService<BotDatabaseManager>();

            await dbManager.AddUserOffenseAsync(
                user: message.Author,
                link: scanResult.Link,
                scannedLinkId: scanResult.ScannedLinkId.Value,
                guild: guildChannel.Guild
            );
            await dbManager.UpdateGuildStatsAsync(guild: guildChannel.Guild, numberOfScans: 0, malwareFoundCount: 1);
        }
        else if (message.Channel is SocketGuildChannel)
        {
            _logger.LogError("ScannedLinkId is null. Skipping AddUserOffenseAsync.");
        }
    }

    private async Task SendEmbedToChannelsAsync(SocketUserMessage message, Embed embed)
    {
        try
        {
            await message.ReplyAsync(embed: embed);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to reply to message with malware");
        }
        if (message.Channel is not SocketGuildChannel guildChannel) { return; }

        using var scope = _scopeFactory.CreateScope();
        var dbManager = scope.ServiceProvider.GetRequiredService<BotDatabaseManager>();
        var guildSettings = await dbManager.GetGuildSettingsAsync(guildChannel.Guild);

        if (guildSettings.AlertChannel.HasValue)
        {
            var potentialChannel = guildChannel.Guild.GetTextChannel(guildSettings.AlertChannel.Value);

            if (potentialChannel is not SocketTextChannel alertChannel)
            {
                _logger.LogWarning(
                    "Configured alert channel with id {channelId} of guild {guildId} is not a SocketTextChannel.",
                    potentialChannel.Id,
                    guildChannel.Guild.Id
                    );
                return;
            }
            await alertChannel.TrySendMessageAsync(
                text: $"Potentially malicious activity in channel <#{message.Channel.Id}>",
                embed: embed,
                logger: _logger
            );
        }
        else
        {
            _logger.LogInformation("No alert channel configured or channel not found.");
        }
    }
}